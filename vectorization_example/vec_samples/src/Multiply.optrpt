Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -std=c99 -opt-report=4 -qopt-report-phase=vec -D NOALIAS -D ALIGNED -o MatVector

Begin optimization report for: matvec(int, int, float (*)[*], float *__restrict__, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at Multiply.c(49,2)
<Distributed chunk1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Multiply.c(49,2)
   <Distributed chunk1>
      remark #15389: vectorization support: reference b[i] has unaligned access   [ Multiply.c(50,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Multiply.c(49,2)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at Multiply.c(49,2)
<Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Multiply.c(60,3)
      remark #15388: vectorization support: reference a[i][j] has aligned access   [ Multiply.c(61,12) ]
      remark #15388: vectorization support: reference x[j] has aligned access   [ Multiply.c(61,22) ]
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 5.000 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Multiply.c(60,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at Multiply.c(49,2)
<Distributed chunk3>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Multiply.c(69,3)
      remark #15388: vectorization support: reference x[l] has aligned access   [ Multiply.c(70,22) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <a[l][i]>, stride is unknown to compiler   [ Multiply.c(70,12) ]
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Multiply.c(69,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at Multiply.c(82,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between x[k] (83:3) and sumx (83:3)
LOOP END
===========================================================================
